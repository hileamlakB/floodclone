October 17-18: Improved philosphy
    - CheckBrainstroming.md
        - definined a utility function
        - created redistirbution factor instead of high bandwidth (for priortization)
        - redistribution factor function still needs to be decided
        - grounded the system design philosphies on the utility function calcuation  

Ocotober 19: Implemented fileManager in python
    - While implementing the FileManager class in python I and measing performance
    I realized it taks a long time to split files and should only be don in parallel, which 
    isn't well suported in python and thus have made the decision to implement this program in 
    c++

October 20: Implemented thread pool
    - I decided I will neeed a thread pool that will be used by among all classes
    - Moreover all classes might have their functions called within a thread
    so it is impotant to make classes thread safe and also use the thread pool 
    insdie the classes to get optimum result.
    - Had to install g++-multilib for fsanitizer support make sure to include that
    in the installation guide (sudo apt-get install g++-multilib)


Nov 4: Completed the sender file manager class
    - had to install sudo apt-get install libssl-dev for managing md5checksum
    - which might not be requried and could be removed to speed up code
    - Created differnt methods for the filemanager class, including send, recieve, initalize, split, merge
    - Make sure the send fucntion could run a thread safe way when the piece being sent isn't 
    avialable, if it isn't avialable it shoudl sleep and wake up again so that available pieces
    could be sent

    - i just realized recieving reconstructing could be done at the same time, 
    there is no point in doing them separelty in two steps instead we can use mmaped file to direclty copy data
    in to the reconstract file at the same tim as creating the piece fie that could be used for future sharing

    - I need to addd a feature to check available and missing pieces
    
    - I will need to implement uint tests and look into how unit test creations work in c++

Nov 6: Implemented RouteInspector

    - Developed a component to analyze the network topology before the download time begins.
        - Rationale for Excluding This from Download Time:
        - The topology remains static and represents constant information.
        - Gathering interface and destination details (such as the interface used to connect to a specific node) should be considered a constant-time operation and treated as given, as it isnâ€™t the primary focus of the project.
        - If necessary, this inspection can be incorporated into the download time after discussing with the TFs.
    
    - For inspection, I avoid relying on the network (self.net) to gather information, as this would conflict with the requirement of being unaware of the underlying network. I only use self.net to obtain the destination IP addresses, which I assume must be provided; otherwise, there would be no way to identify the nodes to which the source is sending files.
    - Future plans include expanding the project to allow dynamic node joining, similar to how new nodes join a torrent swarm, potentially using a distributed hash table (DHT) approach. This however isn't part of the project scope
    - Here is the general logic 
    ```
     # for each node
        #   for every other node starting from node + 1
        #       # first find all interfaces that connected this nodes
        #       for each interface:
        #           # find the hop count
    ```
    I use ip route get to get the interfaces that connec two nodes

Nov 7: Implement a communication thread

    - Nodes need to both make and handle requests from each other. To ensure scalability, 
    I've decided to leverage the existing thread pool I built. This allows incoming requests 
    to be queued as tasks, while a dedicated thread continuously listens for new requests.

Nov 8: Communication Manger
    - I have implementeed a connection_map to keep track of already created connections so that
    I don't have to create connectin each time
    - I have passed the Filemanager as a friend to the connection manger but I don't like that 
    - i want to decouple the connection amanger and the filemanager and create a separate class/function
    for the differnt requests that use both the filemanager and the communication manager class 

Nov 27:
    - Connection Pooling: use a connection map to keep sokets open so that we don't have to worry about
    opening and closing sockets
    - std::string_view allows you to convert a vector of chars as just simple stings in O(1) time

    - when I use send_all in my connection manager I have to first send a header of expected size in one go
    - and then send the data in a subsewuent call to send so that  
    - a reciever always knows to first expect a requet header from which it could extract the payload length

Nov 28:
    - In my current impelmentation every thread has to continlsy check if there has been chages to a scoket
    and process it but this has two problems
    - I need a thread per connection which isn't efficent specially when each thread will continlsy be polling ucnessaly
    some of the solution I thoguth about include using seelct to block instead of poll 
    but an even better solution I came up with is to use even driven appraoche where instead of blocking or polling 
    I let the kenerl add a task to my que whenever there is network card triggered hardware interrupt 

    - Multiple threads shoudln't be able to read and write to the same scokets at the saem time that will cause a race
    codintion thus I hsould implement some sort of locing mechanims tha prevents this form happening. That is why 
    I created the connection class intead of storing fd related to a socket we will store both a lock and fd assoicated
    with each socket and a thread has to get a hold of the lock before it could read or writh to it.

    For threadsanitizers
    sudo apt install g++-multilib
    sudo apt install gcc-multilib

    There was an ubuntu bug and the fix was 
    sudo apt install libgcc-10-dev
    sudo ln -s /usr/lib/gcc/x86_64-linux-gnu/10/libtsan_preinit.o /usr/lib/libtsan_preinit.o

    from stackoverflow: https://stackoverflow.com/questions/77858687/tsan-usr-bin-ld-cant-find-libtsan-preinit-o

    I used EPOLLONESHOT in my socket handling to ensure reliable request processing. This guarantees that only one thread processes a socket at a time, with requests handled sequentially for each connection. When epoll detects data on a socket, it automatically disarms that socket after delivering the event, preventing other threads from processing it until explicitly rearmed. Since my process_request function reads all data associated with a request, any additional data arriving during processing is safely caught when the socket is rearmed. This design prevents race conditions between threads and ensures that epoll wake-ups always correspond to the start of a proper request header. When data arrives while a socket is disarmed (during request processing), it remains buffered and triggers a new event once the socket is rearmed, maintaining both order and data integrity.

    Here is an example
        Time 1: Data A arrives
        Time 2: EPOLLIN triggers
        Time 3: EPOLLONESHOT automatically disarms the socket
        Time 4: While processing A, data B arrives (socket is disarmed)
        Time 5: Finish processing A, rearm socket with EPOLL_CTL_MOD

Nov 29: Adopt Agent day
    - worked on interfacing the python code and the c++ code
    - decided to use 

Nov 30: Implement Piece discovery 
    - Run into a big problem
    The original code has a conflict between two concurrent operations:

    Running the FloodClone file transfer program, which needs to run continuously
    Making dynamic network changes (like bandwidth adjustments) based on a trace file


    The specific problem occurs because:

    Mininet uses a single shell per node
    When a command is run with waitOutput(), it blocks the shell
    The network changes require the shell to be available to execute commands
    This creates a deadlock where network changes can't be made while waiting for FloodClone to finish


    The solution we implemented:

    Runs FloodClone in the background with &
    Redirects output to log files
    Uses process IDs to monitor completion
    This keeps the Mininet shell free to handle network changes
    Preserves the original network change functionality in the starter code

     
